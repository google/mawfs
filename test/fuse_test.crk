# Copyright 2016 Google Inc. All Rights Reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import crack.cmdline CmdOptions, Option, CMD_STR;
import crack.cont.hashmap HashMap;
import crack.fs cwd, makePath, Path;
import crack.hash.sha256 SHA256;
import crack.io cerr, FStr, SEEK_SET;
import crack.lang AppendBuffer, Buffer, Exception, ManagedBuffer;
import crack.process Process, ProcessHandler, ProcessHandlerImpl,
    CRK_PROC_EXITED, CRK_PIPE_STDIN, CRK_PIPE_STDOUT;
import crack.strutil StringArray;
import crack.sys argv, exit;
import crack.runtime open, close, sleep, O_RDONLY;

import mawfs.params ParamInfo;
import test.unittest register, runAllTests, Test, TestFailure;

import 'libc.so.6' fsync, chown;
int fsync(int fd);
int chown(byteptr path, int user, int group);

@import crack.ann assert, impl;

# Change directory to the parent of this file.
cwd.set(makePath(argv[0]).parent().parent());

# Parse command line options.
opts := CmdOptions![
    Option('crack-path', 'c', 'path to the crack binary', 'crack', CMD_STR)
];
otherArgs := opts.parse().subarray(1);
crackPath := opts.getString('crack-path');

const TEST_PASSWORD := 'TestPasswordDudeBestAsstwordFood';
String _expandPw(String pw) {
    hasher := SHA256();
    hasher.update(TEST_PASSWORD);
    return hasher.digest();
}
const EXPANDED_TEST_PASSWORD := _expandPw(TEST_PASSWORD);

bool gotFailures;

@abstract class TestCase : Test {

    ## Deletes the backing directory and returns it.
    Path deleteBacking() {
        backing := makePath('backing');
        if (backing.exists())
            backing.deleteTree();
        return backing;
    }

    ## Run the MAWFS command with 'args' and return the exit code.
    int runMawfsWithStdinRC(StringArray args, AppendBuffer stdout,
                            String stdin
                            ) {
        cmd := StringArray![crackPath, './mawfs'];
        cmd.extend(args);
        pipeStdout := (stdout is null) ? 0 : CRK_PIPE_STDOUT;
        proc := Process(cmd, CRK_PIPE_STDIN | pipeStdout);
        proc.putStdIn(stdin);
        proc.closeStdIn();

        ProcessHandler handler;
        if (pipeStdout) {
            class MyProcessHandler : ProcessHandlerImpl {
                oper init(AppendBuffer stdout) {
                    outBuf = stdout;
                }

                void onOutData(Buffer buf) {
                    outBuf.extend(buf)
                }
            }
            handler = MyProcessHandler(stdout);
        }

        return proc.run(handler) & 0xff;
    }

    int runMawfsRC(StringArray args, AppendBuffer stdout) {
        return runMawfsWithStdinRC(args, stdout,
                                   'TestPasswordDudeBestAsstwordFood'
                                   );
    }

    int runMawfsRC(StringArray args) { return runMawfsRC(args, null) }

    ## Run the mawfs command, throw an exception if there was an error.
    void runMawfs(StringArray args, AppendBuffer stdout) {
        if (runMawfsRC(args, stdout))
            throw Exception('Failed in startup');
    }

    void runMawfs(StringArray args) { runMawfs(args, null) }

    void startFS(String branch, String backing, String dir) {
        runMawfs(StringArray!['run', '-b', branch, '-l',
                              'mawfs_' + dir + '.log', backing, dir]);
    }

    void startFS(String branch) {
        startFS(branch, 'backing', 'fs');
    }

    void stopFS(String dir) {
        if (!(makePath(dir)/'.mawfs').exists())
            return;

        rc := Process(StringArray!['fusermount', '-uz', dir]).run();
        if (rc != CRK_PROC_EXITED) {
            # There seems to be a timing issue here. This doesn't always
            # succeed on the first try.  So if the unmount fails, sleep and
            # try again one more time.
            sleep(1);
            cerr `trying unmount again\n`;
            rc = Process(StringArray!['fusermount', '-uz', 'fs']).run();
        }

        if (rc != CRK_PROC_EXITED || failed)
            cerr `fusermount failed\n`;
    }

    void restartFS(String branch) {
        stopFS('fs');
        startFS(branch);
    }

    void restartSlaveFS(String branch) {
        stopFS('fs2');
        startFS(branch, 'backing2', 'fs2');
    }

    void setUp() {
        deleteBacking().makeDir();
        fsDir := makePath('fs');
        if (!fsDir.exists())
            fsDir.makeDir();
        startFS('master');
    }

    void tearDown() {
        stopFS('fs');
        if (failed)
            cerr `$(makePath('mawfs_fs.log').readAll())\n`;
        deleteBacking();
    }

    ## Get the names of all files in 'dir', if 'dir' is null, get all files
    ## in the root of fs.
    StringArray getAllFiles(Path dir) {
        d := dir ? dir : makePath('fs');

        StringArray result = {};
        for (file :in d.children())
            result.append(file.getName());

        return result;
    }
}

class EmptyDirTest : TestCase {
    void run() {
        if (files := getAllFiles(null))
            throw TestFailure(FStr() `got files in empty dir: $files`);
    }
}
register(EmptyDirTest());

class FileTest : TestCase {

    void run() {
        foo := makePath('fs')/'foo';
        foo.writer().write('this is some data');
        if ((files := getAllFiles(null)) != StringArray!['foo'])

        assertEqual(foo.readAll(), 'this is some data');

        reader := foo.reader();
        reader.seek(4, SEEK_SET);
        ManagedBuffer buf = {4};
        reader.read(buf);
        assertEqual(String(buf, true), ' is ');
    }
}
register(FileTest());

class MkDirTest : TestCase {
    void run() {
        dir := makePath('fs')/'dir';
        dir.makeDir();

        if (!dir.isDir())
            throw TestFailure(FStr() `did not create a directory`);
    }
}
register(MkDirTest());

class MoveTest : TestCase {
    void run() {
        a := makePath('fs')/'a';
        a.writeAll('this is data');

        b := makePath('fs')/'b';
        a.moveTo(b);
        if (a.exists())
            throw TestFailure(FStr() `moved file still exists`);

        if (!b.exists())
            throw TestFailure(FStr() I`moved file doesn't exist in new \
                                       location`
                              );
        assertEqual(b.readAll(), 'this is data');
    }
}
register(MoveTest());

class SubDirFileTest : TestCase {
    void run() {
        dir := makePath('fs')/'dir';
        dir.makeDir();
        foo := dir/'foo';
        foo.writeAll('test data');

        fd := open(makePath('fs').getFullName().buffer, O_RDONLY, 0);
        fsync(fd);
        close(fd);

        # Restart to verify that everything got committed properly.
        stopFS('fs');
        startFS('master');

        assertEqual(foo.readAll(), 'test data');
    }
}
register(SubDirFileTest());

class TruncateTest : TestCase {
    void run() {
        a := makePath('fs')/'a';
        a.writeAll('some data');
        a.truncate(0);
        assertEqual(a.readAll(), '');

        b := makePath('fs')/'b';
        b.writeAll('more data');
        b.truncate(10);
        assertEqual(b.readAll(), 'more data\0');
    }
}
register(TruncateTest());

## Tests the "no-op" functions (chmod and chown).
class NopTest : TestCase {
    void run() {
        a := makePath('fs')/'a';
        a.writeAll('funky file');
        a.setMode(0777);
        chown(a.getFullName().buffer, 1234, 1234);

        # The change is a no-op, so we can't really verify anything.  Just
        # make sure the file is still as we expect it.
        @assert(a.readAll() == 'funky file');
    }
}
register(NopTest());

class UnlinkTest : TestCase {
    void run() {
        a := makePath('fs')/'a';
        a.writeAll('some data');
        a.delete();

        @assert(!a.exists());

        dir := makePath('fs')/'dir';
        dir.makeDir();
        b := dir/'b';
        b.writeAll('more data');
        b.delete();
        @assert(!b.exists());
    }
}
register(UnlinkTest());

class RmDirTest : TestCase {
    void run() {
        dir := makePath('fs')/'dir';
        dir.makeDir();
        dir.delete();
        @assert(!dir.exists());
    }
}
register(RmDirTest());

class AppendTest : TestCase {
    void run() {
        file := makePath('fs/test.txt');
        file.writeAll('this is contents');
        file.appender().write('; more contents!');
        assertEqual(file.readAll(), 'this is contents; more contents!');
    }
}
register(AppendTest());

class AdminFSTest : TestCase {
    void run() {
        admin := makePath('fs')/'.mawfs';
        assertEqual((admin/'branch').readAll(), 'master');
        @assert((admin/'README').readAll().lfind('Copyright') >= 0);
        @assert((admin/'inst/servers').readAll() == '');
    }
}
register(AdminFSTest());

class BranchTest : TestCase {
    void run() {
        admin := makePath('fs')/'.mawfs';
        testFile := makePath('fs')/'test.file';
        testFile.writeAll('file data');
        restartFS('other');
        @assert(!testFile.exists());
        otherFile := makePath('fs')/'other.file';
        otherFile.writeAll('another file');
        branchDir := admin/'alt'/'master';
        branchDir.makeDir();
        assertEqual((branchDir/'test.file').readAll(), 'file data');
    }
}
register(BranchTest());

## Verify that a params file exists and is readable.
class ParamsTest : TestCase {
    void run() {
        params := makePath('backing/params');
        @assert(params.exists());
        @assert(ParamInfo.read(params, EXPANDED_TEST_PASSWORD));
     }
 }
register(ParamsTest());

@abstract class DoubleInstanceTest : TestCase {
    Path backing2, fs2;

    void setUp() {
        backing2 = makePath('backing2');
        fs2 = makePath('fs2');
        if (backing2.exists())
            backing2.deleteTree();
        if (fs2.exists())
            fs2.deleteTree();
        fs2.makeDir();
        TestCase.setUp();
    }

    void tearDown() {
        stopFS('fs2');
        if (backing2.exists())
            backing2.deleteTree();
        if (fs2.exists())
            fs2.deleteTree();
        TestCase.tearDown();
    }
}

class CloneTest : DoubleInstanceTest {
    void run() {
        # Start up a server on port 12543
        (makePath('backing')/'config/peers').writeAll('[server]\nport = 12543\n');
        (makePath('fs')/'foo').writeAll('test file contents');
        restartFS('master');
        runMawfs(StringArray!['clone', 'localhost:12543', 'backing2']);
        @assert((backing2/'params').exists());
        startFS('master', 'backing2', 'fs2');
        @assert((fs2/'foo').readAll() == 'test file contents');

        # Now try doing a "pull" and verify that we see the update in the
        # new filesystem.
        (makePath('fs')/'bar').writeAll('more file contents');
        runMawfs(StringArray!['pull', '-i', 'localhost:9119', 'master']);
        @assert((fs2/'bar').readAll() == 'more file contents');
    }
}
register(CloneTest());

@abstract class MergeTest : DoubleInstanceTest {
    void setUp() {
        DoubleInstanceTest.setUp();
        (makePath('backing')/'config/peers').writeAll('[server]\nport = 12543\n');
        (makePath('fs')/'first').writeAll('test file contents');
        restartFS('master');
        runMawfs(StringArray!['clone', 'localhost:12543', 'backing2']);

        # Start the new instance
        startFS('master', 'backing2', 'fs2');

        # Create files on each branch.
        (makePath('fs')/'on_master').writeAll('on master contents');
        (makePath('fs2')/'on_slave').writeAll('on slave contents');
    }

    void pullAndMerge() {
        runMawfs(StringArray!['pull', '-i', 'localhost:9119', 'master']);
        runMawfs(StringArray!['merge', '-i', 'localhost:9119',
                              '127.0.0.1:12543:master'
                              ]
                 );
    }

    ## Add the slave as a peer and pull "master" back to the master.
    void pullBack() {
        runMawfs(StringArray!['addPeer', '-i', 'fs', 'clone',
                              'localhost:9119'
                              ]
                 );
        runMawfs(StringArray!['pull', '-i', 'fs', 'master']);
    }
}

class MergeWithConflictsTest : MergeTest {
    void run() {
        # Mutate some files, create a conflict.
        (makePath('fs')/'foo').writeAll('new contents');
        (makePath('fs2')/'foo').writeAll('alt contents');

        pullAndMerge();

        # Verify that the meta-data looks as we expect.
        curBranch := (makePath('fs2')/'.mawfs'/'branch').readAll();
        @assert(curBranch.startsWith('merge:'));
        StringArray branches = {};
        for (child :in (makePath('fs2')/'.mawfs'/'alt').children())
            branches.append(child.getName());
        assertEqual(branches,
                    StringArray!['127.0.0.1:12543:master', 'merge:org']
                    );

        # Verify that file contents are as we expect.
        fs2 := makePath('fs2');
        assertEqual((fs2/'on_master').readAll(),
                    'on master contents'
                    );
        assertEqual((fs2/'on_slave').readAll(),
                    'on slave contents'
                    );
        assertEqual((fs2/'foo').readAll(),
                    'alt contents'
                    );

        masterFS := fs2/'.mawfs'/'alt'/'127.0.0.1:12543:master';
        assertEqual(
            (masterFS/'on_master').readAll(),
            'on master contents'
        );
        @assert(!(masterFS/'on_slave').exists());
        assertEqual((masterFS/'foo').readAll(), 'new contents');

        orgFS := fs2/'.mawfs'/'alt'/'merge:org';
        assertEqual((orgFS/'first').readAll(), 'test file contents');
        @assert(!(orgFS/'foo').exists());
        @assert(!(orgFS/'on_master').exists());
        @assert(!(orgFS/'on_slave').exists());

        # now try doing the merge.
        (fs2/'foo').writeAll('resolved');
        runMawfs(StringArray!['resolve', '-i', 'fs2']);

        assertEqual((fs2/'foo').readAll(), 'resolved');
        assertEqual((fs2/'on_master').readAll(), 'on master contents');
        assertEqual((fs2/'on_slave').readAll(), 'on slave contents');

        @assert(!masterFS.exists());
        @assert(!orgFS.exists());

        # Try pulling back to the master and verify that the new commit gets
        # accepted.
        pullBack();
        assertEqual((makePath('fs')/'foo').readAll(), 'resolved');
    }
}
register(MergeWithConflictsTest());

class MergeNoConflictTest : MergeTest {
    void run() {
        pullAndMerge();

        # Verify that we ended up in a clean state.
        masterFS := makePath('fs2')/'.mawfs'/'alt'/'127.0.0.1:12543:master';
        @assert(!masterFS.exists());
        orgFS := makePath('fs2')/'.mawfs'/'alt'/'merge:org';
        assertEqual((makePath('fs2')/'.mawfs'/'branch').readAll(),
                    'master'
                    );
        assertEqual((makePath('fs2')/'on_master').readAll(),
                    'on master contents'
                    );
        assertEqual((makePath('fs2')/'on_slave').readAll(),
                    'on slave contents'
                    );

        # Verify that we can pull into the main branch in the original
        # instance.
        pullBack();
        assertEqual((makePath('fs2')/'.mawfs'/'branch').readAll(),
                    'master'
                    );
        assertEqual((makePath('fs2')/'on_master').readAll(),
                    'on master contents'
                    );
        assertEqual((makePath('fs2')/'on_slave').readAll(),
                    'on slave contents'
                    );

    }
}
register(MergeNoConflictTest());

class CancelMergeTest : MergeTest {
    void run() {
        # Create a conflict.
        (makePath('fs')/'foo').writeAll('new contents');
        (makePath('fs2')/'foo').writeAll('alt contents');

        pullAndMerge();

        # Verify that we're in "outstanding merge" state.
        mawfsDir := makePath('fs2')/'.mawfs';
        masterFS := mawfsDir/'alt'/'127.0.0.1:12543:master';
        @assert(masterFS.exists());
        @assert((mawfsDir/'branch').readAll().startsWith('merge:'));

        # Write a local change.
        (makePath('fs2')/'local_change').writeAll('contents');
        @assert((makePath('fs2')/'local_change').exists());

        # Verify that we've cleaned up the merge.
        runMawfs(StringArray!['cancelMerge', '-i', 'localhost:9119']);
        @assert(!(mawfsDir/'alt').children());
        assertEqual((mawfsDir/'branch').readAll(), 'master');
        @assert(!(makePath('fs2')/'local_change').exists());
    }
}
register(CancelMergeTest());

## Verify that we can restore existing merge states.
class RestoreStateTest : MergeTest {
    void run() {
        # Mutate some files, create a conflict.
        (makePath('fs')/'foo').writeAll('new contents');
        (makePath('fs2')/'foo').writeAll('alt contents');

        pullAndMerge();
        orgDir := makePath('fs2')/'.mawfs'/'alt'/'merge:org';
        @assert(!(orgDir/'foo').exists());
        restartSlaveFS('master');

        # Verify that the meta-data looks as we expect after a restart.
        curBranch := (makePath('fs2')/'.mawfs'/'branch').readAll();
        @assert(curBranch.startsWith('merge:'));
        StringArray branches = {};
        for (child :in (makePath('fs2')/'.mawfs'/'alt').children())
            branches.append(child.getName());
        assertEqual(branches,
                    StringArray!['127.0.0.1:12543:master', 'merge:org']
                    );

        # Verify that the origin looks like we expect it to.
        path := orgDir/'first';
        assertEqual(path.readAll(), 'test file contents');
        @assert(!(orgDir/'foo').exists());
    }
}
register(RestoreStateTest());

## Verify that we can still run things with a missing peer.
class MissingPeerTest : DoubleInstanceTest {
    void run() {
        # Move the master to port 12543, clone it to the slave and start the
        # slave.
        (makePath('backing')/'config/peers').writeAll('[server]\nport = 12543\n');
        restartFS('master');
        runMawfs(StringArray!['clone', 'localhost:12543', 'backing2']);
        startFS('master', 'backing2', 'fs2');

        # Shut down both, verify that we can bring up the slave (the slave has
        # the master as its peer).
        stopFS('fs');

        restartSlaveFS('master');
        rc := runMawfsRC(StringArray!['pull', '-i', 'localhost:9119', 'master']);
        @assert(rc == 1);

        # restart the master, verify that we can pull.
        restartFS('master');
        rc = runMawfsRC(StringArray!['pull', '-i', 'localhost:9119',
                                     'master'
                                     ]
                        );
        @assert(!rc);

        # Now stop the master again, verify that we still get an error.
        stopFS('fs');
        rc = runMawfsRC(StringArray!['pull', '-i', 'localhost:9119',
                                     'master'
                                     ]
                        );
        @assert(rc == 1);
    }
}
register(MissingPeerTest());

class AdminDirAfterFSyncTest : TestCase {
    void run() {
        fd := open(makePath('fs').getFullName().buffer, O_RDONLY, 0);
        fsync(fd);
        close(fd);

        @assert(makePath('fs/.mawfs').exists());
    }
}
register(AdminDirAfterFSyncTest());

class InfoTest : TestCase {
    void run() {
        (makePath('backing')/'config/peers').writeAll('[server]\nport = 12543\n');
        restartFS('master');

        rootPath := cwd/'fs';
        @assert((rootPath/'.mawfs').exists());
        stdout := AppendBuffer(256);
        runMawfs(StringArray!['info', '-i', rootPath.getFullName()], stdout);
        assertEqual(stdout, FStr() `Mountpoint: $rootPath\n`);
    }
}
register(InfoTest());

## Test a clone with an invalid password.
class AuthFailCloneTest : DoubleInstanceTest {
    void run() {
        # Start up a server on port 12543
        (makePath('backing')/'config/peers').writeAll('[server]\nport = 12543\n');
        (makePath('fs')/'foo').writeAll('test file contents');
        restartFS('master');
        rc := runMawfsWithStdinRC(
            StringArray!['clone', 'localhost:12543', 'backing2'],
            null,
            'BaddPassword'
        );
        @assert(rc);
    }
}
register(AuthFailCloneTest());

runAllTests();

/*
String readNode(Node node, int pos, int size) {
    ManagedBuffer buf = {size};
    BlockIter iter = {node};
    iter.setPos(pos);
    iter.read(buf);
    return String(buf, true);
}

int writeNode(Node node, int pos, Buffer data) {
    BlockIter iter = {node};
    iter.setPos(pos);
    return iter.write(data);
}

Stat copyStat(Stat other) {
    if (other is null)
        return null;
    Stat result = Stat();
    result.st_dev = other.st_dev;
    result.st_ino = other.st_ino;
    result.st_mode = other.st_mode;
    result.st_nlink = other.st_nlink;
    result.st_uid = other.st_uid;
    result.st_gid = other.st_gid;
    result.st_rdev = other.st_rdev;
    result.st_blksize = other.st_blksize;
    result.st_blocks = other.st_blocks;
    result.st_atime = other.st_atime;
    result.st_mtime = other.st_mtime;
    result.st_ctime = other.st_ctime;

    return result;
}

class Info {
    String filename;
    Stat stat;

    oper init(String filename, Stat stat) :
        filename = filename,
        stat = copyStat(stat) {
    }

    oper del() {
        free(stat);
    }
}

Entry e(String filename) {
    result := Entry();
    result.name = filename;
    return result;
}

Array[Info] filled = {};

int filler(voidptr buf, byteptr filename, Stat stat, uintz something) {
    filled.append(Info(String(filename), stat));
    return 0;
}

###### BEGIN TESTS

if (true) {
    node := Node();
    node.contents = 'this is a test';

    iter := BlockIter(node);
    @assert(readNode(node, 0, 4) == 'this');
    @assert(readNode(node, 5, 4) == 'is a');
    @assert(readNode(node, 10, 10) == 'test');
}

if (true) {
    node := Node();
    node.children = Array[Entry]![e('foo'), e('bar')];
    node.contents = 'this is some data';

    MAWFSNode fuseNode = {MemNodeStore(), node};
    @assert(!fuseNode.readdir(null, null, filler, 0, null));
    @assert(filled[0].filename == '.');
    @assert(filled[1].filename == '..');
    @assert(filled[2].filename == 'foo');
    @assert(filled[3].filename == 'bar');
    @assert(filled[3].stat.st_mode == 040777);

    ManagedBuffer buf = {64};
    @assert(fuseNode.read(null, buf.buffer, buf.cap, 0, null) == 17);
    buf.size = 17;
    @assert(String(buf, true) == 'this is some data');
}

if (true) {
    node := Node();
    MAWFSNode fuseNode = {MemNodeStore(), node};

    @assert(writeNode(node, 0, 'some data') == 9);
    @assert(readNode(node, 0, 9) == 'some data');
    @assert(writeNode(node, 5, 'pig') == 3);
    @assert(readNode(node, 0, 1024) == 'some piga');
}

if (true) {
    MAWFSNode fs = {MemNodeStore(), Node()};
    ManagedBuffer buf = {8};
    Context ctx = {'/foo', fs};

    data := 'data';
    @assert(fs.write(ctx, data.buffer, data.size, 0, null) == 4);
    @assert(fs.write(ctx, data.buffer, data.size, 4, null) == 4);
    @assert((buf.size = fs.read(ctx, buf.buffer, 3, 0, null)) == 3);
    @assert(buf == 'dat');
    @assert((buf.size = fs.read(ctx, buf.buffer, 10, 3, null)) == 5);
    @assert(buf == 'adata');
}

# Creating files.
if (true) {
    nodeStore := MemNodeStore();
    root := Node();
    nodeStore.storeRoot(nodeStore.storeNode(root)); # {store,get}Root() obsolete
    MAWFSNode fs = {nodeStore, root};
    Context ctx = {'/foo', fs};
    @assert(fs.create(ctx, 0, null) == 0);
    children := root.children;
    @assert(children.count() == 1);
    @assert(children[0].name = 'foo');
    @assert(!nodeStore.getNode(children[0].hash).mode);

    # Verify that we can reproduce this from the node store.
    root = nodeStore.getRoot(); # {store,get}Root() obsolete
    children = root.children;
    @assert(children.count() == 1);
    @assert(children[0].name == 'foo');

    # Verify that we overwrite the existing child and don't add a new one.
    # (I'm not sure this behavior is correct, I think it might be appropriate
    # to make this case an error and require a truncate).
    @assert(fs.create(ctx, 0, null) == 0);
    @assert(children.count() == 1);
    @assert(children[0].name = 'foo');
}

# Create nested file.
if (true) {
    nodeStore := MemNodeStore();
    root := Node();
    nodeStore.storeRoot(nodeStore.storeNode(root)); # {store,get}Root() obsolete
    MAWFSNode fs = {nodeStore, root};
    Context ctx = {'/foo', fs};

    @assert(fs.mkdir(ctx, 0) == 0);
    children := root.children;
    @assert(children.count() == 1);
    @assert(children[0].name == 'foo');

    foo := ctx.lookUp();
    ctx = Context('/foo/bar', fs);
    @assert(foo.create(ctx, 0, null) == 0);

    # Read back all the way from the node store.
    root = nodeStore.getRoot(); # {store,get}Root() obsolete
    children = root.children;
    @assert(children.count() == 1);
    @assert(children[0].name == 'foo');

    dirNode := nodeStore.getNode(children[0].hash);
    @assert(dirNode.mode == MODE_DIR);

    children = dirNode.children;
    @assert(children.count() == 1);
    @assert(children[0].name == 'bar');
}

# Truncate.
if (true) {
    nodeStore := MemNodeStore();
    root := Node();
    nodeStore.storeRoot(nodeStore.storeNode(root)); # {store,get}Root() obsolete
    MAWFSNode fs = {nodeStore, root};
    Context ctx = {'/foo', fs};

    @assert(fs.create(ctx, 0, null) == 0);
    text := 'this is text';
    foo := ctx.lookUp();
    @assert(foo.write(ctx, text.buffer, text.size, 0, null));
    @assert(foo.truncate(ctx, 4) == 0);

    root = nodeStore.getRoot(); # {store,get}Root() obsolete
    fs.setRep(root);
    ManagedBuffer temp = {10};
    foo = ctx.lookUp();
    rc := temp.size = foo.read(ctx, temp.buffer, temp.cap, 0, null);
    @assert(foo.read(ctx, temp.buffer, temp.cap, 0, null) == 4);

    foo.truncate(ctx, 0);
    root = nodeStore.getRoot(); # {store,get}Root() obsolete
    fs.setRep(root);
    foo = ctx.lookUp();
    rc = temp.size = foo.read(ctx, temp.buffer, temp.cap, 0, null);
    @assert(foo.read(ctx, temp.buffer, temp.cap, 0, null) == 0);
}
*/
