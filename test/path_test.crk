# Copyright 2016 Google Inc. All Rights Reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import crack.io cerr;
import mawfs.blockstore Node, Entry, MODE_DIR;
import crack.cont.array Array;
import crack.logger debug, setLogLevel, DEBUG;
import mawfs.path MAWFSPath;
import mawfs.memstore MemNodeStore;
import mawfs.cache CachedNode, NodeContext;
import mawfs.testutil makeRandomData;

@import crack.ann assert;

setLogLevel(DEBUG);

# Create an empty filesystem.
nodeStore := MemNodeStore();
ctx := NodeContext(nodeStore, 'master', 'Branch Commit Digest');
rootNode := CachedNode(ctx, null, Node());
rootNode.node.mode = MODE_DIR;
rootNode.node.children = Array[Entry]();
rootNode.commit();

root := MAWFSPath(rootNode);
foo := root/'foo';
foo.writer().write('first file');
@assert(foo.readAll() == 'first file');
@assert(foo.getSize() == 10);

bar := root/'bar';
foo.moveTo(bar);
@assert(!foo.exists());
@assert(bar.exists());
@assert(bar.readAll() == 'first file');

dir := root/'dir';
dir.makeDir();
@assert(dir.isDir());

truncated := root/'truncated';
truncated.writeAll('here is some data');
truncated.truncate(4);
@assert(truncated.readAll() == 'here');


if (true) {
    data := String(makeRandomData(), true);
    i := 0;
    dst := (root/'bigfile').writer();
    src := (root/'bigfile').reader();
    while (i < data.size) {
        size := data.size - i;
        size = (size >= 4096) ? 4096 : size;
        dst.write(orgData := data.substr(i, size));

        @assert(src.read(size) == orgData)

        i += 4096;
    }
    dst = null;
    src = null;

    @assert(data.size == (root/'bigfile').getSize());
}

cerr `ok\n`;
