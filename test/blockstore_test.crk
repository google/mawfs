
import crack.cont.hashmap HashMap;
import crack.fs makePath, cwd;
import crack.io cerr, StringWriter;
import crack.lang Exception;
import crack.sys argv;
import mawfs.blockstore Change, ChunkStore, Commit, FSInfo, Node, RemoteReader;

@import crack.ann assert, impl;

# Change directory to the parent of this file.
cwd.set(makePath(argv[0]).parent().parent());

testRoot := makePath('blockstore_test');
if (testRoot.exists())
    testRoot.deleteTree();


class FakeRemoteReader @impl RemoteReader {
    HashMap[String, String] data = {};
    String getContents(String digest) {
        return data.get(digest);
    }
}

try {

    testRoot.makeDirs();
    fsInfo := FSInfo('01234567890123456789012345678901');
    store := ChunkStore(testRoot, fsInfo);

    # Verify that a branch starts out as null and with an empty journal.
    @assert(store.getHead('master') is null);
    @assert(!store.getJournalSize('master'));

    # Verify that we can store and retrieve a value.
    store.setHead('master', 'head digest');
    @assert(store.getHead('master') == 'head digest');

    # Test reading/writing the journal.
    if (true) {
        change := Change();
        for (int i = 0; i < 4; ++i) {
            change.type = int32(i);
            store.writeToJournal('foo', change);
        }
    }

    @assert(store.getJournalSize('foo') > 4);

    int i = 0;
    for (entry :in store.makeJournalIter('foo')) {
        if (entry.change.type != i)
            cerr I`Bad change record, got type $(entry.change.type), \
                   expected $i\n`;
        ++i;
    }

    if (i != 4)
        cerr `Expected 4 changes, got $i\n`;

    store.deleteJournal('foo');
    @assert(!store.getJournalSize('foo'));
    for (change :in store.makeJournalIter('foo'))
        cerr `Got change in deleted journal!\n`;

    rr := FakeRemoteReader();
    store.setRemoteReader(rr);

    node := Node();
    node.contents = 'foo was here';

    nodeDigest := store.storeNode(node);
    commit := Commit();
    commit.root = nodeDigest;
    commitDigest := store.storeCommit(commit);

    nodeAndStatus := store.getNodeAndStatus(nodeDigest);
    @assert(!nodeAndStatus.remote);
    @assert(nodeAndStatus == node);
    commitAndStatus := store.getCommitAndStatus(commitDigest);
    @assert(!commitAndStatus.remote);
    @assert(commitAndStatus == commit);

    node = Node();
    node.contents = 'I am bar';
    tmp := StringWriter();
    nodeDigest = fsInfo.writeChunk(tmp, node.toString());
    rr.data[nodeDigest] = tmp.string();
    commit = Commit();
    commit.root = nodeDigest;
    tmp = StringWriter();
    commitDigest = fsInfo.writeChunk(tmp, commit.toString());
    rr.data[commitDigest] = tmp.string();
    nodeAndStatus = store.getNodeAndStatus(nodeDigest);
    @assert(nodeAndStatus.remote);
    @assert(nodeAndStatus == node);
    commitAndStatus = store.getCommitAndStatus(commitDigest);
    @assert(commitAndStatus.remote);
    @assert(commitAndStatus == commit);

    commit = Commit();




    cerr `ok\n`;

    # XXX test delete journal and reading from an empty journal.
} catch (Exception ex) {
    cerr `Exception:\n$ex\n`;
}

testRoot.deleteTree();

