#!/usr/bin/python
# Mawfs wrapper script.
#
# This exists to smooth over some of the temporary deficiencies of the mawfs
# tool.
#
# It's python because crack doesn't yet have good annotation support for
# doing reflection on functions.

import getopt
import getpass
import base64
import hashlib
import os
import socket
import re
import shutil
import subprocess
import sys
from tempfile import SpooledTemporaryFile

class Abort(Exception):
    pass

commands = {}

def command(func):
    commands[func.__name__] = func
    return func

class ArgInfo(object):

    def __init__(self, name, has_default):
        self.name = name
        self.has_default = has_default

    def __str__(self):
        if self.has_default:
            return '[%s]' % self.name
        else:
            return '<%s>' % self.name

def get_args(func):
    """Returns the function argument list."""
    code = func.__code__
    args = code.co_varnames[:code.co_argcount]
    defaults = func.__defaults__ or ()
    zipped = zip(args,
                 [False] * (len(args) - len(defaults)) +
                 [True] * len(defaults)
                 )
    return [ArgInfo(name, has_default) for name, has_default in zipped]

def check_args(func, args):
    """Verifies that the argument list in 'args' is suitable for 'func'."""
    params = get_args(func)
    undefaulted = [x for x in params if not x.has_default]
    if len(args) > len(params) or len(args) < len(undefaulted):
        raise Abort('Expected arguments to %s are %s' %
                     (func.__name__, [str(x) for x in params])
                    )

def get_backing_dir_root():
    """Returns the directory where we keep all of the backing stores."""
    return os.path.join(os.path.expanduser('~'), '.mawfs')

def get_backing_dir(path):
    """Returns the full path to the backing dir for 'path'.
    Args:
        path: (str) absolute path
    """
    hasher = hashlib.md5()
    hasher.update(path)

    # Encode it and truncate the trailing newline and equal signs.
    return os.path.join(get_backing_dir_root(),
                        base64.encodestring(hasher.digest())[:-3])

def is_mawfs_root(path):
    """Returns true if 'path' is the root of a MAWFS filesystem.

    Returns the backing dir path if 'path' is both a directory and has an
    associated backing dir.
    """
    path = os.path.abspath(path)
    if not os.path.isdir(path):
        return False
    backing = get_backing_dir(path)
    if not os.path.exists(backing):
        return False

    return backing

def make_backing_dir(path):
    """
    Args:
        path: (str) an absolute path.
    """
    backing = get_backing_dir(path)
    if not os.path.exists(backing):
        os.makedirs(backing)
    else:
        # TODO: SHould we just try to create the mount point?
        raise Abort('Backing dir for %s already exists (%s)' % (path, backing))
    return backing

PORT_RX = re.compile(r'port\s*=\s*(\d+)')
SECTION_RX = re.compile(r'\[(.+)\]')
VAR_RX = re.compile(r'\s*([^\s=]+)\s*=\s*(\S+(\s*\S+)*)')

def parse_peers_file(filename):
    """Parse the peers file and return it as a multi-level dictionary.

    Returns:
        Dict[str, Dict[str, str]]
    """
    result = {}
    section = {}  # Variables outside of a section will get ignored.
    for line in open(filename):
        m = SECTION_RX.match(line)
        if m:
            section = {}
            result[m.group(1)] = section
            continue

        m = VAR_RX.match(line)
        if m:
            section[m.group(1)] = m.group(2)

    return result

def get_port_from_peers_file(filename):
    config = parse_peers_file(filename)
    return int(config.get('server', {}).get('port', '0'))

def find_unused_port():
    """Returns an unused port number (int) for a new instance."""
    ports = set()
    root = get_backing_dir_root()
    for back in os.listdir(root):
        peers_file = os.path.join(root, back, 'config/peers')
        if os.path.exists(peers_file):
            ports.add(get_port_from_peers_file(peers_file))

    def port_available(port):
        if port in ports:
            return False

        # Try binding to the port on all interfaces
        s = socket.socket(socket.AF_INET, socket.SOCK_STREAM, 0)
        try:
            s.bind(('0.0.0.0', port))
        except socket.error as ex:
            if ex.errno == 98:
                return False
            else:
                raise
        s.close()
        return True

    port = 9131
    while not port_available(port):
        port += 1

    return port

def run_mawfs(*args, **kwargs):
    """Run the "mawfs" command.

    Returns:
        (int) If capture_stdout was not True, returns just the exit code of
        the child process.
        (int, str) if capture_stdout was passed as True, returns the exit code
        and standard output.
    """
    stdin = kwargs.get('stdin')
    capture_stdout = kwargs.get('capture_stdout')
    cmd = [os.environ.get('MAWFS_BIN', 'mawfs')] + \
          [str(arg) for arg in args if arg is not None]
    if stdin is not None or capture_stdout:
        popen_kwargs = {}
        if stdin is not None:
            popen_kwargs['stdin'] = subprocess.PIPE
        if capture_stdout:
            popen_kwargs['stdout'] = subprocess.PIPE
        proc = subprocess.Popen(cmd, **popen_kwargs)
        stdout, _ = proc.communicate(stdin or '')
        rc = proc.wait()
        if capture_stdout:
            return rc, stdout
        else:
            return rc
    else:
        return subprocess.call(cmd)

processed_instance = instance = mount_point = None

def get_server_from_dir(dir):
    server = open(os.path.join(dir, '.mawfs/inst/servers')).read().strip()
    if not server:
        raise Abort('Instance in %s has no RPC interface.' % dir)
    return server

class Instance:
    """Encapsulates the information for addressing an instance.

    To obtain the argument for '-i', use the get_descriptor() method.

    Attributes:
        addr: (str or None) host:port of the instance, None if the instance
            has no server.
        mountpoint: The full path to the mountpoint.
    """

    def __init__(self, addr=None, mountpoint=None):
        """One of port or mountpoint must be specified."""
        self.addr = addr
        self.__mountpoint = mountpoint

    def get_descriptor(self):
        """Returns the port (if defined) or the mountpoint if not.

        In either case, this returns a descriptor that can be used for -i in
        the mawfs command.
        """
        # TODO: invert this, mountpoints are preferrable to addresses because
        # of the nonce.
        return self.addr or self.mountpoint

    @property
    def mountpoint(self):
        if not self.__mountpoint:
            self.__mountpoint = get_mountpoint(self.addr)
        return self.__mountpoint

def get_mountpoint(server):
    """Returns the mounpoint for a given server.

    Args:
        server: (str) server address.
    """
    rc, output = run_mawfs('-i', server, 'info', capture_stdout=True)
    if not rc:
        for line in output.split('\n'):
            if line.startswith('Mountpoint: '):
                return line[12:]
    else:
        raise Abort('Unable to obtain mountpoint from server %s' % server)

def get_instance():
    """Returns the Instance object for the mawfs instance.

    Returns the instance object obtained from the '-i' flag or inferred from
    the current directory.
    """
    global instance, processed_instance
    if processed_instance:
        return processed_instance
    elif instance is None:
        # check for a local ".mawfs" directory with servers in it.
        if os.path.exists('.mawfs/inst/servers'):
            mount_point = os.getcwd()
            server = get_server_from_dir(os.getcwd())
            processed_instance = Instance(addr=server)
        else:
            raise Abort('You must specify an instance (-i <instance>) for '
                        'this command.')
    elif os.path.isdir(instance):
        processed_instance = Instance(mountpoint=os.path.abspath(instance))
    else:
        # Assume it is an address.
        processed_instance = Instance(addr=instance)
    return processed_instance

def read_password():
    if sys.stdin.isatty():
        return getpass.getpass()
    else:
        return sys.stdin.readline().rstrip()

@command
def new(path):
    """Create a new mawfs repository and mount it."""
    if os.path.exists(path):
        raise Abort('Path %s already exists' % path)

    backing = make_backing_dir(os.path.abspath(path))
    logfile = os.path.join(backing, 'mawfs.log')
    try:
        rc = 0
        os.mkdir(path)
        port = find_unused_port()

        password = read_password()

        rc = run_mawfs('create', '-ol', logfile, backing, '-p', port,
                       '-f', '127.0.0.1',
                       stdin=password
                       ) or \
             run_mawfs('run', '-l', logfile, backing, path, stdin=password)
        print('Your filesystem has been mounted on %s' % path)
    finally:
        if rc and os.path.exists(backing):
            shutil.rmtree(backing)
            shutil.rmtree(path)

    return rc

@command
def umount(path):
    """Unmount a mounted mawfs filesystem."""
    return subprocess.call(['fusermount', '-u', path])

def check_backing_exists(backing, path):
    if not os.path.exists(backing):
        raise Abort('%s is not a known mawfs filesystem' % path)

@command
def mount(path):
    """Mount mawfs directory and start an instance."""
    backing = get_backing_dir(os.path.abspath(path))
    check_backing_exists(backing, path)
    if not os.path.exists(path):
        raise Abort('%s does not exist.  (Re)create it with mkdir?')
    logfile = os.path.join(backing, 'mawfs.log')
    return run_mawfs('run', '-l', logfile, backing, path)

@command
def delete(path):
    """Delete a mawfs instance and its backing store."""
    # Make sure the instance isn't mounted.
    if os.path.exists(os.path.join(path, '.mawfs')):
        raise Abort('%s is currrently mounted, unmount before deleting.' %
                    path
                    )

    backing = get_backing_dir(os.path.abspath(path))
    check_backing_exists(backing, path)

    # First unmount if mounted.
    if os.path.exists(os.path.join(path, '.mawfs')):
        umount(path)

    if os.path.exists(path):
        try:
            os.rmdir(path)
        except OSError as ex:
            if ex.errno == 39:
                umount(path)
            os.rmdir(path)
    shutil.rmtree(backing)

@command
def clone(source, dest):
    """Clone 'source' to 'dest'."""
    # TODO: check for ssh: prefixes in both source and dest.

    if os.path.exists(dest):
        raise Abort('%s already exists' % dest)
    backing = get_backing_dir(os.path.abspath(dest))

    port = find_unused_port()

    # Let mawfs do the heavy lifting.
    print('cloning into %s (mount = %s)' % (backing, dest))
    rc = run_mawfs('clone', '-p', port, '-f', '127.0.0.1', source, backing)
    if rc:
        print 'Clone failed.'
    else:
        os.mkdir(dest)
        print('or just run %s mount %s' % (sys.argv[0], dest))


def get_host_and_port(config):
    """Extract the host and port from the config object.

    Returns Tuple[str, str] (host and port) if the host and port are
    configured, None if not.
    """
    server_section = config['server']
    iface = server_section.get('iface')
    port = server_section.get('port')
    enabled = server_section.get('enabled')
    if iface or port or enabled:
        return (iface or '0.0.0.0'), (port or '9119')
    else:
        return None

@command
def info():
    """Show info on a mawfs instance."""
    inst = get_instance()
    backing = get_backing_dir(os.path.abspath(inst.mountpoint))
    check_backing_exists(backing, inst.mountpoint)
    print('Backing-dir: %s' % backing)
    peers_file = os.path.join(backing, 'config', 'peers')
    if os.path.exists(peers_file):
        config = parse_peers_file(peers_file)

        try:
            host_and_port = get_host_and_port(config)
            if host_and_port:
                print('Server-Iface: %s' % host_and_port[0])
                print('Server-Port: %s' % host_and_port[1])
        except KeyError:
            pass

        # Print out info on the peers.
        for key in sorted(config.keys()):
            if key.startswith('peer-'):
                sec = config[key]
                print('%s: host=%s port=%s' %
                      (key, sec.get('host', ''), sec.get('port', '')))
    else:
        print('No peers file.')

@command
def backing_dir():
    """Print out the backing direcctory for an instance."""
    path = get_instance().mountpoint
    backing = get_backing_dir(os.path.abspath(path))
    check_backing_exists(backing, path)
    print(backing)

@command
def address(path):
    """Print the address of the instance for the given backing directory."""
    backing = get_backing_dir(os.path.abspath(path))
    check_backing_exists(backing, path)

    peers_file = os.path.join(backing, 'config', 'peers')
    if os.path.exists(peers_file):
        config = parse_peers_file(peers_file)
        try:
            host_and_port = get_host_and_port(config)
            if host_and_port:
                print('%s:%s' % host_and_port)
        except KeyError:
            pass

@command
def help():
    """Show this help message."""
    for name, func in commands.items():
        args = get_args(func)
        print(' '.join([func.__name__] + [str(x) for x in args]))
        if not func.__doc__:
            print('   Undocumented!')
        else:
            print('   ' + '\n   '.join(func.__doc__.split('\n')))

@command
def pull(branch, peer=None):
    """Pull the branch from the cell."""
    run_mawfs('pull', '-i', get_instance().get_descriptor(), branch, peer)

def file_or_dev_null(filename):
    return filename if os.path.exists(filename) else '/dev/null'

def merge_file(root, branch, filename):
    out = SpooledTemporaryFile()
    target = file_or_dev_null(os.path.join(root, filename))
    org_file = file_or_dev_null(os.path.join(root, '.mawfs/alt/merge:org',
                                             filename))
    other_file = file_or_dev_null(os.path.join(root, '.mawfs/alt', branch,
                                               filename))
    subprocess.call(['diff3', '-m', target, org_file, other_file],
                    stdout=out)

    # Copy everything to the target files.
    out.seek(0)
    with open(target, 'w') as fp:
        while True:
            data = out.read(4096)
            if not data:
                break
            fp.write(data)

@command
def merge(branch):
    """Merge a branch into the current branch."""
    inst = get_instance()
    _, output = run_mawfs('merge', '-i', inst.get_descriptor(), branch,
                          capture_stdout=True)
    processing = False
    for line in output.split('\n'):
        if line.startswith('Conflicts'):
            processing = True
        elif processing and line.startswith('   '):
            filename = line[3:]
            print 'merging %s' % filename
            merge_file(inst.mountpoint, branch, filename)
        else:
            print(line)
    if processing:
        print('There were conflicts in the files above.  Fix them and '
              'use "mfs resolve" to complete the merge.')
    else:
        print('Merge completed without conflicts.')

@command
def resolve():
    """Resolve a pending merge."""
    run_mawfs('resolve', '-i', get_instance().get_descriptor())

@command
def cancel_merge():
    """Cancel a pending merge."""
    run_mawfs('cancelMerge', '-i', get_instance().get_descriptor())

@command
def add_peer(peer_name, peer_addr):
    """Add a new peer to the instance.

    peer_addr can be either an address (e.g. host:port) or another MAFWS
    directory.
    """

    # Convert a peer directory to an address.
    backing = is_mawfs_root(peer_addr)
    if backing:
        config = parse_peers_file(os.path.join(backing, 'config', 'peers'))
        host_and_port = get_host_and_port(config)
        if host_and_port:
            if host_and_port[0] == '0.0.0.0':
                host_and_port = '127.0.0.1', host_and_port[1]
            peer_addr = '%s:%s' % host_and_port
        else:
            print('%s appeares to be a MAWFS root but has no server address' %
                  (peer_addr,))
            return 1

    run_mawfs('addPeer', '-i', get_instance().get_descriptor(), peer_name,
              peer_addr)

@command
def verify():
    """Verify chunks and references in the backing dir."""
    backing_dir = get_backing_dir(get_instance().mountpoint)
    return run_mawfs('verify', backing_dir)

def main(args):
    global instance
    opts, args = getopt.gnu_getopt(args[1:], 'i:')
    for opt, val in opts:
        if opt == '-i':
            instance = val
    try:
        if not args:
            help()
            return 1
        cmd = commands.get(args[0])
        if not cmd:
            raise Abort('Unknown command %s' % args[0])

        # Remove the command, check args and call.
        args = args[1:]
        check_args(cmd, args)
        return cmd(*args)

    except Abort as ex:
        print ex.args[0]

sys.exit(main(sys.argv))
