# Copyright 2016 Google Inc. All Rights Reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

## Module containing the "alt" filesystem container, which is a map of branch
## names to filesystems representing the head of the branch.

import crack.cont.treemap TreeMap;
import crack.fs Path;
import crack.lang Exception;
import crack.io FStr;
import .admin AltSourceDir, PathMap;
import .blockstore NodeStore;
import .cache Tree;
import .path MAWFSPath;

@import crack.ann impl, struct;

@struct BranchInfo {
    String name;
    Tree tree;
}

## Encapsulates the set of branches that are currently memory resident.  This
## gets attached to the node context for use throughout the filesystem.
class ResidentBranches @impl AltSourceDir {
    TreeMap[String, BranchInfo] __branches = {};
    NodeStore __store;

    oper init(NodeStore store) : __store = store {}

    PathMap getBranches() {
        # Generate a path map parented by the parent dir.
        pathMap := PathMap();
        for (branch :in __branches)
            pathMap[branch.key] =
                MAWFSPath(branch.val.tree.getRoot(), null, branch.key);
        return pathMap;
    }

    Path makeBranchDir(String name) {
        if (__branches.hasKey(name))
            throw Exception(FStr() `Branch $name Already defined`);

        # Make sure that there is already a branch of this name.
        if (!__store.getHead(name))
            return null;

        tree := Tree(__store, name);
        root := tree.getRoot();
        __branches[name] = BranchInfo(name, tree);
        return MAWFSPath(root, false);
    }
}
