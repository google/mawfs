# Copyright 2016 Google Inc. All Rights Reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

## Low-level config-store API.

import crack.cont.hashmap OrderedHashMap;
import crack.ffmt.ini iniParser, IniMap;
import crack.fs Path;
import crack.io StandardFormatter;

class ConfigStore {
    String __configName;
    IniMap __config;
    Path path;

    oper init(Path dir, String configName) {
        __configName = configName;

        path = dir/'config';
        if (!path.exists()) {
            path.makeDirs();
        }

        path = dir/'config'/configName;
        if (!path.exists()) {
            path.writer().write('');
        }

        __config = iniParser.parse(path.makeFullReader().readAll());
    }

    void save() {
        __config.formatTo(StandardFormatter(path.writer()));
    }

    String get(String section, String key, String default) {
        if(!__config[section] || !__config[section][key]) {
            return default;
        }

        return __config[section][key];
    }

    void set(String section, String key, String value) {
        # create section if necessary
        if (!__config[section]) {
            iniParser.addSection(__config, section);
        }

        __config[section][key] = value;

        save();
    }

    ## Return an entire section of the config.
    OrderedHashMap[String, String] getSection(String section) {
        result := __config.get(section);
        if (result is null)
            __config[section] = result = OrderedHashMap[String, String]();
        return result;
    }
}
