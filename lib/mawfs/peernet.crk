## The peer network code.

import crack.ascii toLower;
import crack.cont.array Array;
import crack.fs Path;
import crack.io Formatter, FStr, StandardFormatter, StringReader, Writer;
import crack.lang Buffer, Exception;
import crack.logger cerrLogger, DEBUG, ERROR, INFO, FATAL, WARN;
import crack.logger.ctx Log;
import crack.net Address, InetAddress;
import crack.net.comm2 Comm;
import mawfs.configstore ConfigStore;
import mawfs.rawchunk RawChunkReader;
import mawfs.rpc parseAddr, Context, PeerProxy, PeerServiceCommFactory;
import .params ParamInfo;

## Thrown by pullParams() in the case of an invalid password.
class InvalidPasswordError : Exception {
    oper init(String message) : Exception(message) {}
}

class Peer {
    Address addr;
    Comm __comm;
    Log __log;
    PeerProxy __proxy;

    oper init(Comm comm, Log log, Address addr) :
        addr = addr,
        __comm = comm,
        __log = log {
    }

    ## Returns the peer proxy, creating it if necessary.
    PeerProxy getProxy() {
        if (!__proxy)
            __proxy = PeerProxy(__comm, __log, addr);
        return __proxy;
    }

    ## Sets the peer proxy (intended for testing).
    void setProxy(PeerProxy proxy) { __proxy = proxy }

    void formatTo(Formatter out) {
        out `peer-$addr`;
    }
}

## Encapsulates the entire peer subsystem.  Starts a server and manages
## connections to all peers.
class PeerNetwork {
    Comm __comm;
    Log __log;
    RawChunkReader __chunkReader;
    Array[Peer] __peers = {};

    oper init(RawChunkReader chunkReader) :
        __chunkReader = chunkReader {

        __log = Log(cerrLogger, 'peernet');
        __comm = Comm(__log);
        __comm.start();
    }

    void addServer(Address addr) {
        context := Context(__chunkReader);
        factory := PeerServiceCommFactory(context);
        __log.info `starting server on $addr`;
        __comm.startServer(addr, factory, true);
    }

    void addPeer(Address addr) {
        __peers.append(Peer(__comm, Log(__log, FStr() `peer-$addr`), addr));
    }

    ## A a new peer object constructed by the user (intended for testing).
    void addPeer(Peer peer) {
        __peers.append(peer);
    }

    oper del() {
        __comm.stop();
    }

    String getHead(String branch) {
        for (peer :in __peers) {
            proxy := peer.getProxy();
            if (proxy) {
                __log.debug `got peer proxy for $(peer.addr)`;
                head := proxy.getHead(branch);
                if (head)
                    return head;
            } else {
                __log.debug `unable to get proxy for $(peer.addr)\n`;
            }
        }

        return null;
    }

    String getObject(String digest) {
        for (peer :in __peers) {
            proxy := peer.getProxy();
            if (proxy) {
                contents := proxy.getObject(digest);
                if (contents)
                    return contents;
            }
        }

        return null;
    }

    ## Pull the entire journal from a peer.
    ##
    ## TODO: we really need to get the journal and head from the same peer at
    ## the same time.  If the remote peer commits while we're pulling, the
    ## journal will change out from under us.
    ##
    ## root: Root of the backing directory to replicate into.
    ## branch: branch of the journal.
    void pullJournal(Path root, String branch) {
        Writer dst;
        uint pos;
        for (peer :in __peers) {
            proxy := peer.getProxy();
            if (proxy) {
                __log.info `Pulling journal from $peer`;

                # Get the first block.
                jb := proxy.getJournalBlock(null, branch, 0);

                branchPath := root/'journals'/branch;
                if (jb.contents) {
                    branchPath.parent().makeDirs();
                    dst = branchPath.writer();
                    dst.write(jb.contents);
                    pos = jb.contents.size;
                }

                while (!jb.done) {
                    jb := proxy.getJournalBlock(jb.firstBlockDigest, branch,
                                                pos
                                                );
                    if (jb.contents) {
                        pos += jb.contents.size;
                        dst.write(jb.contents);
                    } else if (!jb.firstBlockDigest && !jb.done) {
                        # The journal has changed.
                        # TODO: This is where we really need to get the new
                        # head and start over again.
                        __log.info `Remote journal has changed.`;
                        branchPath.delete();
                        return;
                    }

                    if (jb.done)
                        break;
                }

                __log.info `Journal of size $pos retrieved.`;
            }
        }
    }

    ## Pull the params file from a peer.  Returns null if no peer could be
    ## found.
    ## Throws InvalidPasswordError on an invalid password, RemoteError if the peer
    ## doesn't have a params file (or runs into problems reading it) and any
    ## of the exceptions raised by ParamInfo.read() if the file is corrupt,
    ParamInfo pullParams(Path root, String password) {
        for (peer :in __peers) {
            proxy := peer.getProxy();
            if (proxy) {
                __log.info `Pulling params from $peer`;
                contents := proxy.getFile('params');
                pi := ParamInfo.read(StringReader(contents), password);
                if (!pi)
                    throw Exception('Invalid password');
                root.makeDirs();
                (root/'params').writeAll(contents);
                return pi;
            }
        }
        return null;
    }

    ## Convfigure the peer network from the config store.
    void configure(ConfigStore config) {

        ifaceStr := config.get('server', 'iface', '');
        portStr := config.get('server', 'port', '');
        enabled := config.get('server', 'enabled', '');

        # If "enabled" is not explicitly defined, infer whether to run a
        # server based on whether "port" or "iface" is defined.
        if (!enabled && (ifaceStr || portStr) || toLower(enabled) == 'true') {
            addr := ifaceStr ? ifaceStr : '0.0.0.0';
            if (portStr)
                addr = FStr() `$addr:$portStr`;
            inetAddr := parseAddr(addr);
            if (!inetAddr)
                __log.error `Unable to start server on address $addr\n`;
            else
                addServer(inetAddr);
        }

        ## Initialize peeers.
        for (section :in config) {
            if (section.key.startsWith('peer-')) {
                peerName := section.key.substr(5);
                peerInfo := section.val;
                addrStr := peerInfo.get('host');
                if (!addrStr) {
                    __log.error `No "host" parameter for peer $peerName.`;
                    continue;
                }

                portStr := peerInfo.get('port');
                if (portStr)
                    addrStr = FStr() `$addrStr:$portStr`;
                inetAddr := parseAddr(addrStr);
                __log.info `adding peer $peerName at $inetAddr`;
                addPeer(inetAddr);
            }
        }
    }
}
