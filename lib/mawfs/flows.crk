## High-level workflows.

import crack.cont.array Array;
import crack.fs Path;
import crack.functor Functor0;
import crack.io FStr;
import crack.lang Exception;
import crack.logger debug, error, info;
import crack.threads Mutex, MutexLock, Queue, Thread;

import .blockstore ChunkStore, Commit;
import .cache Cache, NodeContext;
import .inst InstanceState;
import .merge Merger, MergeState;
import .peernet PeerNetwork;
import .rawchunk GeneralCallback;
import .rpc parseAddr, InfoResponse;
import .rpc InstIFace, MergeResult, MergeResponse;
import .util findCommonAncestor;

@import crack.ann assert, cvars, define, impl;

alias Task = Functor0[void];

## The thread pool used to run flows. It's currently just a single thread.
##
## Use the submit() method to submit tasks for execution, submit a task that
## evaluates to "false" to kill the thread.
class ThreadPool {
    Mutex __mutex = {};
    Queue[Task] __queue = {};

    class __Thread : Thread {
        @cvars { Queue[Task] __queue; }

        void run() {
            info `Worker thread pool started.`;
            while (task := __queue.get())
                task();
            info `Worker thread pool terminating.`;
        }
    }

    __Thread __thread;

    void __start() {
        MutexLock lock = {__mutex};
        if (!__thread) {
            __thread = __Thread(__queue);
            __thread.start();
        }
    }

    ## Subit a task for execution.
    void submit(Task task) {
        __start();
        __queue.add(task);
        if (!task) {
            lock := MutexLock(__mutex);
            __thread = null;
        }
    }
}

ThreadPool __pool = {};

@define task(vars, resultType, action) {
    class MyTask @impl Task {
        @cvars {
            vars
            GeneralCallback[resultType] callback;
        }

        void oper call() {
            resultType result;
            Exception exception;
            try {
                result = (action);
            } catch (Exception ex) {
                actionName := $action;
                error `Got exception in task $actionName: $ex`;
                exception = ex;
            }
            callback(result, exception);
        }
    }
}

import crack.io cerr;
class MAWFSInstance @impl InstIFace {
    InstanceState __state;
    PeerNetwork __net;

    oper init(InstanceState state, PeerNetwork net) :
        __state = state,
        __net = net {
    }

    ## Returns true if the commit derives from the ancestor.
    ##
    ## TODO: Improve this algorithm.  We're just using a simple recursive
    ## depth-first search for this, that's bound to be inefficient considering
    ## the way branching is likely to play out.
    ##
    ## Requires a lock on the instance state.
    bool __derivesFrom(String commitDigest, String ancestorDigest) {
        if (commitDigest == ancestorDigest)
            return true;

        commit := __state.getStore().getCommit(commitDigest);
        @assert(commit);
        bool result;
        if (commit.parent) {
            for (parent :in commit.parent) {
                if (__derivesFrom(parent, ancestorDigest))
                    result = true;
            }
        }
        return result;
    }

    ## If 'laterCommitDigest' derives from 'curCommitDigest', returns the
    ## commit that derives directly from 'curCommitDigest'.  This may be the
    ## later commit or it may be a commit that the later commit derives from.
    ##
    ## If the later commit does not derive from the current one, returns null.
    ##
    ## Requires a lock on the instance state.
    Commit __getFollowingCommit(String curCommitDigest, String laterCommitDigest) {
        commit := __state.getStore().getCommit(laterCommitDigest);
        @assert(commit);
        if (commit.parent) {
            for (parent :in commit.parent) {
                if (parent == curCommitDigest)
                    return commit;
                else if (c := __getFollowingCommit(curCommitDigest, parent))
                    return c;
            }
        }
        return null;
    }

    ## Helper function for __pullBranch, does everything but update the local
    ## tree.
    ##
    ## Requires a lock on the instance state.
    String __pullBranch(String name, String peer) {
        backing := __state.getBacking();
        store := __state.getStore();
        localHead := store.getHead(name);
        String newName;
        if (!localHead) {
            # The branch isn't present locally, so we can pull it.
            __net.pullJournal(backing, name, false);
            newName = name;
        } else {
            # Pull the journal to a temporary name. (This returns a temporary
            # name even if there's no remote journal).
            newName = __net.pullJournal(backing, name, true);
        }

        if (!newName)
            throw Exception('No peer was able to supply the branch.');

        jiter := store.makeJournalIter(newName);
        if (!jiter) {
            # No journal.  Try pulling the commit.
            headAndPeer := __net.getHead(name);
            if (!headAndPeer)
                throw Exception('Unable to retrieve branch');
            head := headAndPeer.head;

            # If our commit is derived from the remote commit, we're done.
            if (localHead && __derivesFrom(localHead, head))
                return name;

            # If there is a local journal for the branch, check to see if the
            # new commit includes all changes.
            # XXX This won't work if there are a few commits in between, need
            # to get the commit immediately following this one.
            localJiter := store.makeJournalIter(name);
            if (localJiter) {
                # Note that if we get here, there's a local journal so we're
                # assuming newName is the name of a tracking branch.
                commit := __getFollowingCommit(localHead, head);
                bool incompatible;
                if (commit.journalInfo) {
                    nodeCtx := NodeContext(store, Cache(), name);
                    sessionIds := nodeCtx.getJournalInfo(commit.journalInfo);

                    # Verify that all sessions that are in the local journal
                    # are present in the commit.
                    for (entry :in localJiter) {
                        if (!sessionIds.get(entry.change.sessionId)) {
                            # There are changes in the local journal that
                            # aren't in the commit, so we have to branch.
                            info I`Unable to fast-forward pull of \
                                   branch $name, missing session id \
                                   $(entry.change.sessionId.getRepr())`;
                            incompatible = true;
                            break;
                        }
                    }
                } else {
                    # No journal info, assume incompatible.
                    incompatible = true;
                }


                # If the new commit subsumes the local journal, delete the
                # local journal.
                if (!incompatible) {
                    (backing/'journals'/name).delete();
                    newName = name;

                # Otherwise make sure we've changed the name (even if there's
                # no local journal).
                } else if (name == newName) {
                    newName = headAndPeer.peer + ':' + name;
                }
            } else if (localHead && __derivesFrom(head, localHead)) {
                # There's no journals and the new head derives from the local
                # head. We're going to want to store the new head and we can
                # subsume the old branch.
                newName = name;
            }

            store.setHead(newName, head);
            return newName;
        }
        store.setHead(newName, newHead := jiter.elem().change.commit);

        if (name == newName) {
            return name;
        } else {
            # There was an existing branch, compare it to the new one.
            localJiter := store.makeJournalIter(name);
            if (!localJiter) {
                # No local journal - we're done unless the new commit derives
                # from the old one.  If that's true, fall through and we'll
                # enter the logic for "a remote journal extending a local
                # journal" below.
                if (!__derivesFrom(newHead, localHead))
                    return newName;
            } else if (!localJiter || localJiter.elem().change.commit != newHead) {
                return newName;
            }

            while (jiter && localJiter) {
                if (jiter.elem().change != localJiter.elem().change)
                    break;
                jiter.next();
                localJiter.next();
            }

            if (jiter && !localJiter) {
                # The new journal extends the old one.  We can just accept the
                # new journal.
                # TODO: move the "move branch" functionality to the chunk store.
                (backing/'journals'/newName).moveTo(backing/'journals'/name);
                (backing/'refs'/newName).moveTo(backing/'refs'/name);
                return name;
            } else if ((localJiter && !jiter) || (!jiter && !localJiter)) {
                # Either the journals are the same or the old journal extends
                # the new one, we can just discard the new journal.
                (backing/'journals'/newName).delete();
                (backing/'refs'/newName).delete();
                return name;
            } else {
                # In any other case, the journals diverge.
                return newName;
            }
        }
    }

    ## Pull a branch from a peer to the local instance.  This can result in the
    ## production of a tracking branch.   Returns the name of the new branch,
    ## which is the same as 'branch' unless a tracking branch is created.
    ## If the branch is the current branch for the instance, the instance is
    ## updated.
    ##
    ## 'peer' is the peer to try to pull from.  It can be null, in which case
    ## we attempt to pull from any peer.
    String pullBranch(String branch, String peer) {
        lock := __state.lock();
        result := __pullBranch(branch, peer);
        if (result == __state.getBranch())
            __state.resetTree();
        return result;
    }

    MergeResult merge(String branch) {
        lock := __state.lock();

        # Get the local branch.
        target := __state.getRoot().getCachedNode();

        # Get the branch to merge with.
        otherPath := __state.makeResidentBranch(branch);
        if (!otherPath)
            throw Exception(FStr() `Branch $branch not found`);
        other := otherPath.getCachedNode();

        # Find the common ancestor.
        org := findCommonAncestor(target, other);

        # Attempt the merge.
        result := Merger(target, org, other).merge();

        # Install the new root node in the instance.
        __state.setRoot(result.newRoot);

        if (result.conflict) {
            # Add a branch for the common ancestor.
            __state.makeResidentBranch('merge:org', org);

            # Build the list of conflicting paths.
            conflict := Array[String]();
            for (name :in result.conflict)
                conflict.append(name);

            # Attach the current merge state to the instance.
            __state.setPendingMerge(result.getState());
            __state.save();

            return MergeResult(result.branch, null, conflict);
        } else {
            __state.removeResidentBranch(branch);
            commit := result.newRoot.getContext().getBaselineCommit();
            return MergeResult(null, commit, null);
        }
    }

    ## Cleans up an existing merge.  Must have the instance state locked.
    void __cleanupMerge(MergeState merge) {
        ctx := __state.getRoot().getCachedNode().getContext();

        # Remove the backing files for the merge branch.
        ctx.removeBranch(merge.mergeBranch);

        # Clean up the resident branches.
        __state.removeResidentBranch(merge.otherBranch);
        __state.removeResidentBranch('merge:org');

        # Fix the merge info and rewrite the local state.
        __state.setPendingMerge(null);
        __state.save();
    }

    ## Close out a merge that had conflicts.  This removes the temporary merge
    ## branches and commits the merge against the original branch.  This
    ## fails if the original branch has received changes since the merge.
    ##
    ## This has a return type of 'int' only to conform to the needs of the @task
    ## macro.  Always returns zero.
    int resolve() {
        lock := __state.lock();

        # Get the pending merge.
        merger := __state.makeMerger();

        # XXX verify that the original branch is unchanged.

        # Do a commit on the merge branch.
        merger.commit();

        # Replace the original branch.
        rootContext := merger.newRoot.getContext();
        __state.setHead(rootContext.getBaselineCommit());
        __state.getStore().deleteJournal(__state.getBranch());

        # Now we can just change the branch name of the root node context.
        rootContext.setBranch(merger.orgBranch);

        __cleanupMerge(__state.getPendingMerge());
        __state.resetTree();
        return 0;
    }

    ## Cancels the pending merge operation, removing all temporary merge
    ## branches.
    ## The integer return value is unused.
    int cancelMerge() {
        lock := __state.lock();

        # Verify that there's a pending merge.  We don't do makeMerger() here
        # because it's more expensive and unncessary.
        merge := __state.getPendingMerge();
        if (!merge)
            throw Exception('No merge operations is pending');

        # Return the tree to its target branch.
        __state.setBranch(merge.targetBranch);

        __cleanupMerge(merge);
        return 0;
    }

    ## Adds a new peer to the instance (and only the instance, not the entire
    ## network).
    int addPeer(String peerName, String peerAddr) {
        lock := __state.lock();

        info `adding peer $peerAddr to network and backing store\n`;
        addr := parseAddr(peerAddr);
        __net.addPeer(addr);

        # Read the existing file.
        backing := __state.getBacking();
        peerFile := backing/'config/peers';
        contents := peerFile.exists() ? peerFile.readAll() : '';

        # Rewrite it with the new contents.
        peerFile.parent().makeDirs();
        writer := peerFile.writer();
        writer.write(contents);

        writer.write(FStr() I`
            [peer-$peerName]
            host = $(addr.getHostname())
            port = $(addr.getPort())
            `);
        return 0;
    }

    ## RPC service for pullBranch.  Starts the call off in a new thread.
    void pullBranch(String name, String peer,
                    GeneralCallback[String] callback
                    ) {
        @task(MAWFSInstance inst; String name; String peer;, String,
              inst.pullBranch(name, peer));
        __pool.submit(MyTask(this, name, peer, callback));
    }

    void merge(String branch, GeneralCallback[MergeResponse] callback) {
        @task(MAWFSInstance inst; String branch;, MergeResponse,
              inst.merge(branch));
        __pool.submit(MyTask(this, branch, callback));
    }

    void resolve(GeneralCallback[int] callback) {
        @task(MAWFSInstance inst;, int, inst.resolve());
        __pool.submit(MyTask(this, callback));
    }

    void cancelMerge(GeneralCallback[int] callback) {
        @task(MAWFSInstance inst;, int, inst.cancelMerge());
        __pool.submit(MyTask(this, callback));
    }

    void addPeer(String peerName, String peerAddr,
                 GeneralCallback[int] callback
                 ) {
        @task(MAWFSInstance inst; String peerName; String peerAddr;, int,
              inst.addPeer(peerName, peerAddr));
        __pool.submit(MyTask(this, peerName, peerAddr, callback));
    }

    InfoResponse getInfo() {
        resp := InfoResponse();
        lock := __state.lock();
        resp.mountpoint = __state.getMountpoint().getFullName();
        return resp;
    }
}
