# Copyright 2018 Google Inc. All Rights Reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import crack.cont.hashmap HashMap;
import crack.fs Path;
import crack.io FStr, SeekableReader, SeekableWriter;
import crack.lang InvalidArgumentError, InvalidStateError;
import crack.logger info;
import crack.protobuf readMessageFromString;
import crack.threads Mutex, MutexLock;

import .admin AdminRootFactory, InfoFiles;
import .alt ResidentBranches;
import .blockstore Commit, Node, NodeStore, MODE_DIR;
import .ciphers Cipher;
import .cache CachedNode, Tree;
import .merge LocalInstanceState, Merger, MergeState;
import .path MAWFSPath;

@import crack.ann define, interface;

class FileInfo {

    ## File Handle.
    uint64 fh;

    SeekableReader reader;
    SeekableWriter writer;

    oper init(uint64 fh, SeekableReader reader, SeekableWriter writer) :
        fh = fh,
        reader = reader,
        writer = writer {
    }
}

## Object that can be atteched to the filesystem, allowing the creating
## process to inject functionality to be executed in the forked process.
@interface UserModule {

    ## Start the module.  Called during filesystem initialization.
    @abstract void start();
}

## Manages the mutable state of the entire MAWFS instance.
##
## Before using any methods in this class, a client must acquire a MutexLock by
## calling the lock() method.  The client must retain this lock for the
## duration of its sesion with the InstanceManager.  The methods of this class
## will throw an InvalidStateError if a lock is not active.
class InstanceState {

    # Keeps track of whether the instance is currently locked (via the mutex).
    bool __locked;
    Mutex __mutex;

    # Current backing directory.
    Path __backing;

    Cipher __cipher;
    NodeStore __store;
    Tree __tree;
    HashMap[int, FileInfo] __files = {};

    String __branch;
    UserModule __userModule;

    # Instance wide information files.  See setInfoFile() below.
    InfoFiles __infoFiles = {};

    # Resident branches.  These are the branches that are accessible through
    # the .mawfs/alt directory.  They can be created by the user with a
    # "mkdir" or internally from other parts of the system, like RPCs.
    ResidentBranches __branches;

    # The current pending merge.
    MergeState __pendingMerge;

    # Current root path of the instance.
    MAWFSPath __root;

    class __Lock : MutexLock {
        InstanceState __state;

        oper init(Mutex mutex, InstanceState state) :
            MutexLock(mutex),
            __state = state {
            __state.__locked = true;
        }

        oper del() {
            __state.__locked = false;
        }
    }

    ## Hook the new root node into the tree.
    void __setRoot(CachedNode cachedRoot) {
        # Create the set of resident branches and attach it to the root node
        # context.
        ctx := cachedRoot.getContext();
        if (!__branches)
            __branches = ResidentBranches(__store, ctx.getCache());
        __branches.putIn(ctx);

        # Store the instance information and admin root factory for the same
        # reason.
        __infoFiles.putIn(ctx);
        AdminRootFactory().putIn(ctx);

        __root = MAWFSPath(cachedRoot);
    }

    ## Reset the tree and the root node to the latest commit and journal on
    ## the branch.
    ## Do this when the journal changes from an external source (like a branch
    ## pull).
    void resetTree() {
        __tree = Tree(__store, __branch);
        cachedRoot := __tree.getRoot();
        __setRoot(cachedRoot);
    }

    ## Install a new root node into the instance.
    void setRoot(CachedNode root) {
        __tree = Tree(root);
        __setRoot(root);
    }

    ## Constructor.
    ##
    ## backing: the root of the backing directory.
    ## store: the node store
    ## branch: the active branch name
    ## mutex: the filesystem mutex
    ## userModule: a user module to be started when the fuse system is
    ##     initialized.  May be null.
    oper init(Path backing, Cipher cipher, NodeStore store, String branch,
              Mutex mutex,
              UserModule userModule
              ) :
        __mutex = mutex,
        __backing = backing,
        __cipher = cipher,
        __store = store,
        __branch = branch,
        __userModule = userModule {

        resetTree();
    }

    ## Returns a lock on the instance state.  Clients must retain this lock
    ## object for the duration of their session with InstanceState or any
    ## objects managed by it.  Attempting to call
    MutexLock lock() {
        return __Lock(__mutex, this);
    }

    @define checkLock() {
        if (!__locked)
            throw InvalidStateError('Inatance not locked.');
    }

    ## Returns the backing directory.
    Path getBacking() {
        @checkLock();
        return __backing;
    }

    ## Returns the latest commit digest on the current branch.
    String getHead() {
        @checkLock();
        return __store.getHead(__branch);
    }

    void setHead(String commitDigest) {
        @checkLock();
        __store.setHead(__branch, commitDigest);
    }

    ## Returns the current branch name.
    String getBranch() {
        @checkLock();
        return __branch;
    }

    ## Set the branch to that specified.  This also changes the root node and
    ## resets the tree.
    void setBranch(String branch) {
        @checkLock();
        __branch = branch;
        resetTree();
    }

    ## Calls the start() method of the UserModule, if there is one.
    void start() {
        @checkLock();
        if (__userModule)
            __userModule.start();
    }

    ## Does a full commit on the tree (see Tree.commit()).
    void commit() {
        @checkLock();
        __tree.commit();
        resetTree();
    }

    ## Gets the root directory of the filesystem.
    MAWFSPath getRoot() {
        @checkLock();
        return __root;
    }

    void setRoot(MAWFSPath root) {
        @checkLock();
        __root = root;
    }

    ## Store a new FileInfo object for the given reader and writer.
    FileInfo makeFileInfo(SeekableReader reader, SeekableWriter writer) {
        @checkLock();

        # Find the first unused handle
        uint64 fh = 0;
        while (__files.hasKey(fh))
            ++fh;

        # Create, store and return it.
        fi := FileInfo(fh, reader, writer);
        __files[fh] = fi;
        return fi;
    }

    ## Gets the fileinfo object, returns null if not defined.
    FileInfo getFileInfo(int fh) {
        @checkLock();
        return __files.get(fh);
    }

    ## Delete the fileinfo for the filehandle.
    void deleteFileInfo(int fh) {
        @checkLock();
        __files.delete(fh);
    }

    ## Add a resident branch.  Throws an InvalidArgumentError if the branch
    ## does not exist.  Succeeds silently if the branch is already resident.
    MAWFSPath makeResidentBranch(String branchName) {
        @checkLock();
        result := __branches.getBranchDir(branchName);
        if (!result)
            throw InvalidArgumentError(FStr() `Invalid branch $branchName`);
        return result;
    }

    ## Make a resident branch for the given root object.
    void makeResidentBranch(String branchName, CachedNode root) {
        @checkLock();
        __branches.makeBranchDir(branchName, root);
    }

    ## Removes a resident branch.  Throws a KeyError if it doesn't exist.
    void removeResidentBranch(String branchName) {
        @checkLock();
        __branches.removeBranchDir(branchName);
    }

    ## Returns the tree for the given resident branch.  Returns null if the
    ## branch is not defined.
    Tree getResidentBranchTree(String branchName) {
        @checkLock();
        return __branches.getBranchTree(branchName);
    }

    ## Returns the node store.
    NodeStore getStore() {
        @checkLock();
        return __store;
    }

    ## Set the value of an "info file" to be stored in the .mawfs
    ## administrative directory.
    void setInfoFile(String filename, String contents) {
        @checkLock();
        __infoFiles[filename] = contents;
    }

    ## Set the pending merge operation.  'mergeState' may be null to clear the
    ## current pending merge.
    void setPendingMerge(MergeState mergeState) {
        @checkLock();
        __pendingMerge = mergeState;
    }

    ## Returns the current merge state, or null if we're not in a pending
    ## merge.
    MergeState getPendingMerge() {
        @checkLock();
        return __pendingMerge;
    }

    ## Creates the Merger for the current merge state.  Throws
    ## InvalidStateError if there is no pending merge.
    Merger makeMerger() {
        @checkLock();
        if (!__pendingMerge)
            throw InvalidStateError('No merge operation is pending.');
        orgRoot := __branches.getBranchTree('merge:org').getRoot();
        otherRoot :=
            __branches.getBranchTree(__pendingMerge.otherBranch).getRoot();
        return Merger(__tree.getRoot(), orgRoot, otherRoot, __pendingMerge);
    }

    ## Load the local instance state from the backing store.
    void load() {
        @checkLock();

        # Quit early if there's no state file.
        instStateFile := __backing/'inst';
        if (!instStateFile.exists())
            return;

        state := LocalInstanceState();
        serialized := instStateFile.readAll();
        readMessageFromString(state, __cipher.decrypt(serialized));
        __pendingMerge = state.mergeState;

        # If we're currently looking at the target branch, set to the merge
        # branch.
        if (__pendingMerge && __pendingMerge.targetBranch == __branch) {

            # Restore the resident branches.
            orgTree := Tree(__store,
                            __root.getCachedNode().getContext().getCache(),
                            __branch
                            );
            orgTree.setTargetChange(__pendingMerge.orgChange);
            orgTree.initialize();
            makeResidentBranch('merge:org', orgTree.getRoot());
            makeResidentBranch(__pendingMerge.otherBranch);
            setBranch(__pendingMerge.mergeBranch);
        }
    }

    ## Write the local instance state to the backing store.
    void save() {
        state := LocalInstanceState();
        state.mergeState = __pendingMerge;
        (__backing/'inst').writeAll(__cipher.encrypt(state.toString()));
    }

    ## Create a new state object, creating a new commit node and root node if
    ## necessary.
    @static InstanceState create(Path backing, Cipher cipher,
                                 NodeStore store,
                                 String branch,
                                 Mutex mutex,
                                 UserModule userModule
                                 ) {
        # Get the existing root node or create one if this is an empty
        # filesystem.
        commitDigest := store.getHead(branch);
        if (!commitDigest) {
            info `creating new filesystem`;
            store.createRepository(branch);
        }

        state := InstanceState(backing, cipher, store, branch, mutex,
                               userModule
                               );
        lock := state.lock();
        state.load();
        return state;
    }
}
