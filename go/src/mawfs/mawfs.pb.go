// Code generated by protoc-gen-go. DO NOT EDIT.
// source: mawfs/mawfs.proto

/*
Package mawfs is a generated protocol buffer package.

It is generated from these files:
	mawfs/mawfs.proto

It has these top-level messages:
	Entry
	Node
	Commit
	Change
*/
package mawfs

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// A filesystem entry.  Nodes can either be directories or blobs.
// Directories have a mode of MODE_DIR and their entries all have name
// attributes.  Blobs do not have MODE_DIR and their entries all have
// sizes, the size being the total size of the contents of the subtree
// under that entry.
type Entry struct {
	// The sha256 hash of the encrypted object.
	Hash []byte `protobuf:"bytes,1,opt,name=hash" json:"hash,omitempty"`
	// The name of the object (for a directory entry).
	Name *string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	// The 32 bit checksum of the original file (calculated by adding
	// bytes).
	OrgChecksum *int32 `protobuf:"varint,3,opt,name=org_checksum" json:"org_checksum,omitempty"`
	// The size of the total contents of the subtree (for a blob entry).
	Size             *uint64 `protobuf:"varint,4,opt,name=size" json:"size,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *Entry) Reset()                    { *m = Entry{} }
func (m *Entry) String() string            { return proto.CompactTextString(m) }
func (*Entry) ProtoMessage()               {}
func (*Entry) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Entry) GetHash() []byte {
	if m != nil {
		return m.Hash
	}
	return nil
}

func (m *Entry) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *Entry) GetOrgChecksum() int32 {
	if m != nil && m.OrgChecksum != nil {
		return *m.OrgChecksum
	}
	return 0
}

func (m *Entry) GetSize() uint64 {
	if m != nil && m.Size != nil {
		return *m.Size
	}
	return 0
}

// A filesystem node.  MAWFS is agnostic to the difference between files
// and directories.  A MAWFS node can contain both named entries and
// contents.
type Node struct {
	Checksum *int32  `protobuf:"varint,1,opt,name=checksum" json:"checksum,omitempty"`
	Contents *string `protobuf:"bytes,2,opt,name=contents" json:"contents,omitempty"`
	// 'size' is the size of the data in all children.
	Size     *uint64  `protobuf:"varint,4,opt,name=size" json:"size,omitempty"`
	Children []*Entry `protobuf:"bytes,3,rep,name=children" json:"children,omitempty"`
	// See the MODE_* constants above.  'mode' should be present for all
	// top-level file nodes and directory nodes.
	Mode             *int32 `protobuf:"varint,5,opt,name=mode" json:"mode,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *Node) Reset()                    { *m = Node{} }
func (m *Node) String() string            { return proto.CompactTextString(m) }
func (*Node) ProtoMessage()               {}
func (*Node) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Node) GetChecksum() int32 {
	if m != nil && m.Checksum != nil {
		return *m.Checksum
	}
	return 0
}

func (m *Node) GetContents() string {
	if m != nil && m.Contents != nil {
		return *m.Contents
	}
	return ""
}

func (m *Node) GetSize() uint64 {
	if m != nil && m.Size != nil {
		return *m.Size
	}
	return 0
}

func (m *Node) GetChildren() []*Entry {
	if m != nil {
		return m.Children
	}
	return nil
}

func (m *Node) GetMode() int32 {
	if m != nil && m.Mode != nil {
		return *m.Mode
	}
	return 0
}

// A commit.  These objects track the history of an entire filesystem.
type Commit struct {
	// The digest of the "parent" commits.  There should generally be one
	// of these.
	// The first tree of the filesystem will have no parents.
	// A "merge" commit (which merges two filesystems) will have more than
	// one parent.
	Parent [][]byte `protobuf:"bytes,1,rep,name=parent" json:"parent,omitempty"`
	// The digest of the root of the filesystem at the point of the commit.
	Root             []byte `protobuf:"bytes,2,opt,name=root" json:"root,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *Commit) Reset()                    { *m = Commit{} }
func (m *Commit) String() string            { return proto.CompactTextString(m) }
func (*Commit) ProtoMessage()               {}
func (*Commit) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *Commit) GetParent() [][]byte {
	if m != nil {
		return m.Parent
	}
	return nil
}

func (m *Commit) GetRoot() []byte {
	if m != nil {
		return m.Root
	}
	return nil
}

// Change is like a lightweight Commit for purposes of storing changes in
// the filesystem journal.
type Change struct {
	// Types are the CHANGE_* constants.
	Type *int32 `protobuf:"varint,1,req,name=type" json:"type,omitempty"`
	// List of child indexes representing a path to the node to be
	// modified.
	Path []int32 `protobuf:"varint,10,rep,name=path" json:"path,omitempty"`
	// Child name.
	Name *string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	// Node to be added.
	Node *Node `protobuf:"bytes,3,opt,name=node" json:"node,omitempty"`
	// Change to be applied to a nested child (should be another Changes
	// message).
	Nested []byte `protobuf:"bytes,4,opt,name=nested" json:"nested,omitempty"`
	// Position to insert data into for a write.
	Pos *uint64 `protobuf:"varint,5,opt,name=pos" json:"pos,omitempty"`
	// Data to be inserted in a write.
	Data []byte `protobuf:"bytes,6,opt,name=data" json:"data,omitempty"`
	// New size of the node for a resize.
	NewSize *uint64 `protobuf:"varint,7,opt,name=newSize" json:"newSize,omitempty"`
	// The digest of the last Change.  Every change should have this
	// except for the first change after a commit, which should have a
	// 'commit' field.
	LastChange []byte `protobuf:"bytes,8,opt,name=lastChange" json:"lastChange,omitempty"`
	// The commit that this change should be applied to.  Only the first
	// change after a commit should have this field, all others should
	// have 'lastChange' instead.
	Commit           []byte `protobuf:"bytes,9,opt,name=commit" json:"commit,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *Change) Reset()                    { *m = Change{} }
func (m *Change) String() string            { return proto.CompactTextString(m) }
func (*Change) ProtoMessage()               {}
func (*Change) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *Change) GetType() int32 {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return 0
}

func (m *Change) GetPath() []int32 {
	if m != nil {
		return m.Path
	}
	return nil
}

func (m *Change) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *Change) GetNode() *Node {
	if m != nil {
		return m.Node
	}
	return nil
}

func (m *Change) GetNested() []byte {
	if m != nil {
		return m.Nested
	}
	return nil
}

func (m *Change) GetPos() uint64 {
	if m != nil && m.Pos != nil {
		return *m.Pos
	}
	return 0
}

func (m *Change) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *Change) GetNewSize() uint64 {
	if m != nil && m.NewSize != nil {
		return *m.NewSize
	}
	return 0
}

func (m *Change) GetLastChange() []byte {
	if m != nil {
		return m.LastChange
	}
	return nil
}

func (m *Change) GetCommit() []byte {
	if m != nil {
		return m.Commit
	}
	return nil
}

func init() {
	proto.RegisterType((*Entry)(nil), "Entry")
	proto.RegisterType((*Node)(nil), "Node")
	proto.RegisterType((*Commit)(nil), "Commit")
	proto.RegisterType((*Change)(nil), "Change")
}

func init() { proto.RegisterFile("mawfs/mawfs.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 281 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x5c, 0x8f, 0x4d, 0x4e, 0xc3, 0x30,
	0x10, 0x85, 0x95, 0xe6, 0xa7, 0xed, 0x24, 0xe2, 0xc7, 0xb0, 0xf0, 0x12, 0x65, 0x81, 0xba, 0x0a,
	0x52, 0xaf, 0x80, 0x10, 0x3b, 0x36, 0x1c, 0x00, 0xac, 0x64, 0x68, 0x22, 0x6a, 0x3b, 0x8a, 0x07,
	0x55, 0xe5, 0x42, 0x5c, 0x93, 0x19, 0x07, 0x55, 0xa2, 0x1b, 0x4b, 0xcf, 0xf3, 0xcd, 0x9b, 0xf7,
	0xe0, 0xda, 0x9a, 0xc3, 0x47, 0x78, 0x88, 0x6f, 0x33, 0x4e, 0x9e, 0x7c, 0xfd, 0x0c, 0xf9, 0x93,
	0xa3, 0xe9, 0xa8, 0x2a, 0xc8, 0x7a, 0x13, 0x7a, 0x9d, 0xdc, 0x25, 0x9b, 0x4a, 0x94, 0x33, 0x16,
	0xf5, 0x82, 0xd5, 0x5a, 0xdd, 0x42, 0xe5, 0xa7, 0xdd, 0x5b, 0xdb, 0x63, 0xfb, 0x19, 0xbe, 0xac,
	0x4e, 0xf9, 0x37, 0x17, 0x26, 0x0c, 0xdf, 0xa8, 0x33, 0x56, 0x59, 0xfd, 0x0e, 0xd9, 0x8b, 0xef,
	0x50, 0x5d, 0xc1, 0xea, 0xc4, 0x25, 0x91, 0x93, 0x1f, 0xef, 0x08, 0x1d, 0x85, 0x3f, 0xbf, 0x7f,
	0x9b, 0x4a, 0xcb, 0xc6, 0xb0, 0xef, 0x26, 0x74, 0xec, 0x9c, 0x6e, 0xca, 0x6d, 0xd1, 0x9c, 0x32,
	0x59, 0xf6, 0xd4, 0xb9, 0xf8, 0xd4, 0xf7, 0x50, 0x3c, 0x7a, 0x6b, 0x07, 0x52, 0x17, 0x50, 0x8c,
	0x86, 0x71, 0xe2, 0x0b, 0xe9, 0x9c, 0x76, 0xf2, 0x9e, 0xa2, 0x7b, 0x55, 0xff, 0x24, 0x0c, 0xf6,
	0xc6, 0xed, 0x50, 0x06, 0x74, 0x1c, 0x91, 0xb1, 0xc5, 0x1c, 0x78, 0x34, 0xd4, 0x6b, 0xe0, 0xa5,
	0xfc, 0xac, 0xe2, 0x0d, 0x2b, 0x39, 0x25, 0xd5, 0xca, 0x6d, 0xde, 0xc4, 0x2e, 0x7c, 0xc7, 0x61,
	0x20, 0xec, 0x62, 0xd2, 0x4a, 0x95, 0x90, 0x8e, 0x3e, 0xc4, 0x38, 0x99, 0xec, 0x77, 0x86, 0x8c,
	0x2e, 0xe2, 0xe8, 0x12, 0x96, 0x0e, 0x0f, 0xaf, 0xd2, 0x6a, 0x19, 0xc7, 0x0a, 0x60, 0x6f, 0x02,
	0xcd, 0x41, 0xf4, 0x2a, 0x42, 0xec, 0xd7, 0xc6, 0x06, 0x7a, 0x2d, 0xfa, 0x37, 0x00, 0x00, 0xff,
	0xff, 0x85, 0x71, 0xe4, 0xf2, 0x90, 0x01, 0x00, 0x00,
}
